{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/img/profile.ico","path":"img/profile.ico","modified":0,"renderable":0},{"_id":"themes/Hexo-Theme-AirCloud/source/css/aircloud.css","path":"css/aircloud.css","modified":0,"renderable":1},{"_id":"themes/Hexo-Theme-AirCloud/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/Hexo-Theme-AirCloud/source/css/aircloud.less","path":"css/aircloud.less","modified":0,"renderable":1},{"_id":"themes/Hexo-Theme-AirCloud/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/Hexo-Theme-AirCloud/source/css/aircloud.css.map","path":"css/aircloud.css.map","modified":0,"renderable":1},{"_id":"themes/Hexo-Theme-AirCloud/source/js/index.js","path":"js/index.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/GitPage再会.md","hash":"542e4d028538c8c4236867030458696f556b0c6c","modified":1634133072770},{"_id":"source/_posts/GitPage初见.md","hash":"5e78a657d6d1a43a60ce476a6eee5fb11ba93ebb","modified":1634121578905},{"_id":"source/_posts/hello-world.md","hash":"dd4177a15c04bd98fda8a64fae9fa7c76287167e","modified":1634113186199},{"_id":"source/_posts/爬取B站指定up主所有视频封面.md","hash":"07ff373767ded14cfb67ff751c0aa222f16dc547","modified":1634278399929},{"_id":"source/about/index.md","hash":"4a4db0be9f9adc6344f692a667343c07cad6ca11","modified":1634124082035},{"_id":"source/categories/index.md","hash":"e6574d61b6e1f3a12b338e98374291d3a1b46abe","modified":1634121540424},{"_id":"source/tags/index.md","hash":"e4f46822d5573b64cd28870c60e377c5ce0dc55e","modified":1634121546157},{"_id":"source/category/index.md","hash":"f866500bc6624b767db517dfc7e80e3816059e6f","modified":1634121537700},{"_id":"source/_posts/GitPage再会/image-20211013104840706-16340933276951.png","hash":"58925cae9ecfd9df0de6212b321accb9588e7f7e","modified":1634093327700},{"_id":"source/_posts/GitPage再会/image-20211013104840706.png","hash":"58925cae9ecfd9df0de6212b321accb9588e7f7e","modified":1634093320711},{"_id":"source/_posts/GitPage再会/image-20211013125535030.png","hash":"c85d508af41d243c2f9a248fe845c1f476fb97f4","modified":1634100935037},{"_id":"source/_posts/GitPage再会/image-20211013113431614.png","hash":"fe6d49c1bd7b857f491702698615f7b818412d61","modified":1634096071617},{"_id":"source/_posts/GitPage再会/image-20211013165810378.png","hash":"472bca61a990da3ec85f17956f212c186179ab9a","modified":1634115490388},{"_id":"source/_posts/GitPage初见/image-20211011235429217.png","hash":"d0a4858084e95bd18e5d094b39875b694aa91b7a","modified":1633967669236},{"_id":"source/_posts/GitPage初见/image-20211012005032236.png","hash":"e2c54938ad88ab20556316e8bb74ed9dadfe4b4b","modified":1633971032268},{"_id":"source/_posts/GitPage初见/image-20211012000236087.png","hash":"238456e6ea894c5178b343eba0811035d9b48fbb","modified":1633968156103},{"_id":"source/_posts/GitPage初见/image-20211012005202636.png","hash":"e36470a441b5815d7752e934e188b4ce06bd51e6","modified":1633971122654},{"_id":"source/_posts/GitPage初见/image-20211012005353568.png","hash":"fb4d74b7675b35f0ead61a29beb8b660e205584a","modified":1633971233611},{"_id":"source/_posts/GitPage初见/image-20211012195022141.png","hash":"930270f2c1afdb7dd7e88b758c6bc64e6e870ae0","modified":1634039422159},{"_id":"source/_posts/GitPage初见/image-20211012212811606.png","hash":"c6763610a793a03d16ee4f5efb636d6609f7275a","modified":1634045291610},{"_id":"source/_posts/GitPage初见/image-20211012214503181.png","hash":"4ba6c9b51b6a485f466a54a929995d64a8be3b40","modified":1634046303188},{"_id":"source/_posts/GitPage初见/image-20211012213030439.png","hash":"3fda364312157cf779b82af8ee63a8794abcf653","modified":1634045430448},{"_id":"source/_posts/GitPage初见/image-20211012213134836.png","hash":"a6c9578da8db4b4bfedccc677bc5189551d12993","modified":1634045494839},{"_id":"source/img/profile.ico","hash":"7cfe4339f465b65e0b5297561233254b59aaa84e","modified":1634045663711},{"_id":"source/_posts/GitPage初见/image-20211011233002637.png","hash":"e7dc32b389da6ec9306b033927636fbb6fe416e0","modified":1633966202743},{"_id":"source/_posts/GitPage初见/image-20211011235808391.png","hash":"1df7921960ac41f59732be20b354eda28d51c0d3","modified":1633967888431},{"_id":"source/_posts/GitPage初见/image-20211012213825868.png","hash":"8fb556741788bd2a12db83c6de20065bddc1d869","modified":1634045905915},{"_id":"themes/Hexo-Theme-AirCloud/layout/page.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1634042485337},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/about.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1634042485339},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/about.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1634042485340},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/diff.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1634042485341},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/diff.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1634042485341},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/page.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1634042485347},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/page.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1634042485347},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1634042485349},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/theme.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1634042485349},{"_id":"source/_posts/GitPage再会/image-20211013125604618.png","hash":"d30164fbf47af020ccb5fa82da71794341bbff3d","modified":1634100964683},{"_id":"themes/Hexo-Theme-AirCloud/LICENSE","hash":"278d4c4d923734a79286b3a5b524723c107c132a","modified":1634042485329},{"_id":"themes/Hexo-Theme-AirCloud/.gitignore","hash":"e0ed028c2b034754ba17b141041c4b6fb2499177","modified":1634042485328},{"_id":"themes/Hexo-Theme-AirCloud/_config.yml","hash":"0ad3a6ab2c9bb07fb1e030052622fdcde5c6f28a","modified":1634042485330},{"_id":"themes/Hexo-Theme-AirCloud/readme-en.md","hash":"abb3560f471191278681891903353919f606c7b7","modified":1634042485337},{"_id":"themes/Hexo-Theme-AirCloud/readme.md","hash":"ed6d035a9c024f0787322d5c579fec405e3bdf40","modified":1634042687595},{"_id":"themes/Hexo-Theme-AirCloud/languages/en.yml","hash":"8326653662ab628d33289c7fdaea3701274bb6fa","modified":1634042485332},{"_id":"themes/Hexo-Theme-AirCloud/languages/ko.yml","hash":"53ab9cd27ca3fd5959743362b5aa62d868b0c795","modified":1634042485332},{"_id":"themes/Hexo-Theme-AirCloud/languages/zh.yml","hash":"a469a77ac8e83639c85739c7e9d79c7b9a1bbb52","modified":1634112089713},{"_id":"themes/Hexo-Theme-AirCloud/layout/404.ejs","hash":"51ac993ccbd409d7bfe0deee0de8015a89b5a15c","modified":1634042485333},{"_id":"themes/Hexo-Theme-AirCloud/layout/about.ejs","hash":"24512de66f4e00cebe9be8e97bcfc2e4a4efdd12","modified":1634042485335},{"_id":"themes/Hexo-Theme-AirCloud/layout/archive.ejs","hash":"fe44df8eacf6e5e27df30b450033b18cae88f523","modified":1634042485335},{"_id":"themes/Hexo-Theme-AirCloud/layout/categories.ejs","hash":"5cc18800b317362f9afb359d355409b350a4a75d","modified":1634277807557},{"_id":"themes/Hexo-Theme-AirCloud/layout/category.ejs","hash":"1a62de35e14975f117bdce106a3054c3f72cc9f3","modified":1634277167637},{"_id":"themes/Hexo-Theme-AirCloud/layout/index.ejs","hash":"c8597d668ee305cc31b3b7ad74c4c81489982a22","modified":1634042485336},{"_id":"themes/Hexo-Theme-AirCloud/layout/layout.ejs","hash":"390fb229607680d1d18c6ab857b0082c47a39000","modified":1634274527049},{"_id":"themes/Hexo-Theme-AirCloud/layout/post.ejs","hash":"a6a21ce10886cfdcecb3547d7ff7e0b4da7ecb5d","modified":1634095378723},{"_id":"themes/Hexo-Theme-AirCloud/layout/tags.ejs","hash":"4de0555bf1f0e35fae7f797d43d7a8a0caf843ca","modified":1634042485337},{"_id":"themes/Hexo-Theme-AirCloud/layout/_partial/donate.ejs","hash":"d97224a63f76045cbd0a53a3cabef3f0fd010ad3","modified":1634042485334},{"_id":"themes/Hexo-Theme-AirCloud/layout/_partial/head.ejs","hash":"f2efb1f71199e44f1986d2f4723191fa728b332a","modified":1634042485334},{"_id":"themes/Hexo-Theme-AirCloud/layout/_partial/footer.ejs","hash":"e69bd577627cdd22bd05208c2ba790e3d9c21283","modified":1634121433804},{"_id":"themes/Hexo-Theme-AirCloud/layout/_partial/nav.ejs","hash":"526b2218795167d8d0d641f2589eea60afefaf0c","modified":1634102008657},{"_id":"themes/Hexo-Theme-AirCloud/layout/_partial/toc.ejs","hash":"20106463b4885e93ef69122d69464174c45df71d","modified":1634042485335},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/archive.css","hash":"372da40133108078c91c3fc73b361aa81436248f","modified":1634042485340},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/archive.less","hash":"b27c479274d648918f29452aae8139bafe997804","modified":1634042485341},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/categories.less","hash":"7b9d66cc1d1d7b118cb7280f33a92e8f6e25697f","modified":1634277493244},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/common.css","hash":"0e80d6a42e463be27180f60c38d50615445c3177","modified":1634042485341},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/common.less","hash":"b09d13483dbc701fa34dedb6d2db8177e5fe7ad7","modified":1634042485341},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/donate.css","hash":"d5c94d24c9ea63b1c2eb186a333f07a28a1f88a6","modified":1634042485342},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/donate.less","hash":"efaf3572a73c26aff77331e18543b6b2336931c0","modified":1634042485342},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/gitment.css","hash":"01fdbed1c91ed4bd685886c298383809a0c5f1d7","modified":1634042485342},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/gitment.less","hash":"f6f18d9e7451c501234a1d2166813edae63cd7d5","modified":1634042485343},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/hightlight.less","hash":"d6a57167162eaa7f1b64f83c583a212f33aba586","modified":1634042485344},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/hightlight.css","hash":"d6a57167162eaa7f1b64f83c583a212f33aba586","modified":1634042485343},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/index.less","hash":"91f05eb476510fcbb2bed556092dfd889656ef0b","modified":1634042485344},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/layout.less","hash":"332a42d5ab45c73a25c90b182ede63a4dfdfbe30","modified":1634042485345},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/index.css","hash":"8853826ff7e2f679f481f7de6cd742d9aaf76778","modified":1634042485344},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/layout.css","hash":"f0d83db7d9a041c540cdeb093cedffdb982f90e4","modified":1634042485345},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/nav.css","hash":"66675a061db5067c088d314193a0f1ec8ef53276","modified":1634042485345},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/nav.less","hash":"5828d1f0436701c153e1f10d39ee2b2e251a6eae","modified":1634042485346},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/post.css","hash":"ac889864719f7c261a6d1f48c7ffe4d177e662eb","modified":1634042485347},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/tag.css","hash":"bde136456c498eb671ea75c5315130d7dea1d9ba","modified":1634131195891},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/post.less","hash":"070f68106148a453e4c00b55d0644badfd9b4a64","modified":1634042485348},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/tag.less","hash":"e75576604e73ce22559ea0ff7816a52f72772219","modified":1634042485348},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/toc.less","hash":"8ab3e0bc1f7c9e466d7916e0bb2bfe7f2b4e1386","modified":1634042485349},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/toc.css","hash":"c17dd8c7c0326ff41eec9c25dbbcb19895f07367","modified":1634042485349},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/variables.css","hash":"c5d6ce4d904e7c108fbf4f2392eb2917bed636d8","modified":1634042485350},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/variables.less","hash":"e881ecdb19c4c5c6452abd5d0c6294c83fe6cb53","modified":1634042485350},{"_id":"themes/Hexo-Theme-AirCloud/source/css/aircloud.css","hash":"db21a323a33468b850486c31fc26fa4fd4182c76","modified":1634275050057},{"_id":"themes/Hexo-Theme-AirCloud/source/css/aircloud.less","hash":"cf339e918c04f33837516cf4f54e27640cf48460","modified":1634042485351},{"_id":"themes/Hexo-Theme-AirCloud/source/css/gitment.css","hash":"c6951e8c4d709f1917c2cf78b9777d9610cb6532","modified":1634042485352},{"_id":"themes/Hexo-Theme-AirCloud/source/css/aircloud.css.map","hash":"50db34961d11f6f461e23912609d25141068a6fc","modified":1634042485351},{"_id":"themes/Hexo-Theme-AirCloud/source/js/index.js","hash":"e44073fdb9d7dd334b39b65fc741172e62d42330","modified":1634042485353},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/_partial/footer.css.map","hash":"9e8d4df5d08425de5a8b247d0dd8b805c6edc661","modified":1634042485339},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/_partial/footer.css","hash":"c14a3aac90c0d6fc0c4cdcd84b98e2ce3005d47f","modified":1634042485339},{"_id":"themes/Hexo-Theme-AirCloud/source/_less/_partial/footer.less","hash":"a4137692c2b8fd287ac014feb3e73aa0502f7c23","modified":1634042485339},{"_id":"source/_posts/GitPage再会/image-20211013104859549.png","hash":"71a4c379905b2b2699814d14a1b69b5f24c17e34","modified":1634093339579},{"_id":"source/_posts/GitPage初见/image-20211012212716126.png","hash":"290952fb9cea014bd41d3b3adee0bd4ad7e72383","modified":1634045236204},{"_id":"source/_posts/GitPage再会/image-20211013113715325.png","hash":"baad3c2d96a2ce263f009f6a9df9a5559f01a982","modified":1634096235399},{"_id":"themes/Hexo-Theme-AirCloud/source/js/gitment.js","hash":"7d7a9c07794fb31fd6d4620e473d05e14e27285d","modified":1634042485353},{"_id":"public/search.json","hash":"9e07d36103e5180e47a352466601739449a68776","modified":1634278414207},{"_id":"public/category/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1634278414207},{"_id":"public/about/index.html","hash":"e90dfcf59ef111cab572be553c602afa97013eb5","modified":1634278414207},{"_id":"public/categories/index.html","hash":"858210d679abbbb775dfab9d145b7ef643fce07f","modified":1634278414207},{"_id":"public/tags/index.html","hash":"c9cbbeda06185c7c0ab08bd436d6484c13a087da","modified":1634278414207},{"_id":"public/2021/10/15/爬取B站指定up主所有视频封面/index.html","hash":"cf26552c18b9c913c9408bcc8233029fefcaba1a","modified":1634278414207},{"_id":"public/2021/10/12/hello-world/index.html","hash":"6840ad6234406171b51a12b7c73365bb1956af02","modified":1634278414207},{"_id":"public/archives/index.html","hash":"74c8423e8b4876429457639c064bc2b82dea9fdb","modified":1634278414207},{"_id":"public/archives/2021/index.html","hash":"74c8423e8b4876429457639c064bc2b82dea9fdb","modified":1634278414207},{"_id":"public/archives/2021/10/index.html","hash":"74c8423e8b4876429457639c064bc2b82dea9fdb","modified":1634278414207},{"_id":"public/categories/programming/index.html","hash":"29f7a8202b55df7c3ce30873e4e8c56743eefa1e","modified":1634278414207},{"_id":"public/categories/other/index.html","hash":"944eed177c166cc9783364a21ae71cf674252c71","modified":1634278414207},{"_id":"public/categories/programming/杂/index.html","hash":"1d714b763e64203c3e197cd0e507c046adcb5204","modified":1634278414207},{"_id":"public/categories/programming/杂/爬虫/index.html","hash":"ed73b5acf7870706cdd632ed7908f45e4f99f9c2","modified":1634278414207},{"_id":"public/categories/programming/杂/GitPage/index.html","hash":"ac979e9b9563db79857a02e004202c8ef4199346","modified":1634278414207},{"_id":"public/index.html","hash":"5c8fce169ee0458c3f99ae721ecb9d6dc13ca111","modified":1634278414207},{"_id":"public/tags/GitPage/index.html","hash":"3089620575080d73eace70331ad3d65ead9a4b65","modified":1634278414207},{"_id":"public/tags/其他/index.html","hash":"3089620575080d73eace70331ad3d65ead9a4b65","modified":1634278414207},{"_id":"public/tags/爬虫/index.html","hash":"3089620575080d73eace70331ad3d65ead9a4b65","modified":1634278414207},{"_id":"public/2021/10/13/GitPage再会/index.html","hash":"ef6ecc62d68ae3ef9053ba764b0d596b6f80007a","modified":1634278414207},{"_id":"public/2021/10/12/GitPage初见/index.html","hash":"4b5f63915efcb062ece15a98d913ae9be8445047","modified":1634278414207},{"_id":"public/css/aircloud.less","hash":"cf339e918c04f33837516cf4f54e27640cf48460","modified":1634278414207},{"_id":"public/css/aircloud.css.map","hash":"50db34961d11f6f461e23912609d25141068a6fc","modified":1634278414207},{"_id":"public/2021/10/12/GitPage初见/image-20211011235429217.png","hash":"d0a4858084e95bd18e5d094b39875b694aa91b7a","modified":1634278414207},{"_id":"public/2021/10/12/GitPage初见/image-20211012005202636.png","hash":"e36470a441b5815d7752e934e188b4ce06bd51e6","modified":1634278414207},{"_id":"public/2021/10/12/GitPage初见/image-20211012000236087.png","hash":"238456e6ea894c5178b343eba0811035d9b48fbb","modified":1634278414207},{"_id":"public/2021/10/12/GitPage初见/image-20211012005032236.png","hash":"e2c54938ad88ab20556316e8bb74ed9dadfe4b4b","modified":1634278414207},{"_id":"public/2021/10/12/GitPage初见/image-20211012005353568.png","hash":"fb4d74b7675b35f0ead61a29beb8b660e205584a","modified":1634278414207},{"_id":"public/2021/10/12/GitPage初见/image-20211012213030439.png","hash":"3fda364312157cf779b82af8ee63a8794abcf653","modified":1634278414207},{"_id":"public/2021/10/12/GitPage初见/image-20211012195022141.png","hash":"930270f2c1afdb7dd7e88b758c6bc64e6e870ae0","modified":1634278414207},{"_id":"public/2021/10/12/GitPage初见/image-20211012212811606.png","hash":"c6763610a793a03d16ee4f5efb636d6609f7275a","modified":1634278414207},{"_id":"public/2021/10/12/GitPage初见/image-20211012213134836.png","hash":"a6c9578da8db4b4bfedccc677bc5189551d12993","modified":1634278414207},{"_id":"public/2021/10/12/GitPage初见/image-20211012214503181.png","hash":"4ba6c9b51b6a485f466a54a929995d64a8be3b40","modified":1634278414207},{"_id":"public/2021/10/13/GitPage再会/image-20211013104840706.png","hash":"58925cae9ecfd9df0de6212b321accb9588e7f7e","modified":1634278414207},{"_id":"public/2021/10/13/GitPage再会/image-20211013104840706-16340933276951.png","hash":"58925cae9ecfd9df0de6212b321accb9588e7f7e","modified":1634278414207},{"_id":"public/2021/10/13/GitPage再会/image-20211013113431614.png","hash":"fe6d49c1bd7b857f491702698615f7b818412d61","modified":1634278414207},{"_id":"public/2021/10/13/GitPage再会/image-20211013125535030.png","hash":"c85d508af41d243c2f9a248fe845c1f476fb97f4","modified":1634278414207},{"_id":"public/2021/10/13/GitPage再会/image-20211013165810378.png","hash":"472bca61a990da3ec85f17956f212c186179ab9a","modified":1634278414207},{"_id":"public/img/profile.ico","hash":"7cfe4339f465b65e0b5297561233254b59aaa84e","modified":1634278414207},{"_id":"public/2021/10/12/GitPage初见/image-20211011233002637.png","hash":"e7dc32b389da6ec9306b033927636fbb6fe416e0","modified":1634278414207},{"_id":"public/2021/10/12/GitPage初见/image-20211011235808391.png","hash":"1df7921960ac41f59732be20b354eda28d51c0d3","modified":1634278414207},{"_id":"public/2021/10/12/GitPage初见/image-20211012213825868.png","hash":"8fb556741788bd2a12db83c6de20065bddc1d869","modified":1634278414207},{"_id":"public/js/index.js","hash":"fcec9a2e4fd90a40957359d423f7f61caa712830","modified":1634278414207},{"_id":"public/css/gitment.css","hash":"926b553be983d6dd90bcb60c5d6d4ee215d268a6","modified":1634278414207},{"_id":"public/css/aircloud.css","hash":"7de32c597620923c108f722bdfe56a3a95b9f2c4","modified":1634278414207},{"_id":"public/js/gitment.js","hash":"89687f8fffe1125e08323fd6635ca4e53771c05e","modified":1634278414207},{"_id":"public/2021/10/13/GitPage再会/image-20211013125604618.png","hash":"d30164fbf47af020ccb5fa82da71794341bbff3d","modified":1634278414207},{"_id":"public/2021/10/12/GitPage初见/image-20211012212716126.png","hash":"290952fb9cea014bd41d3b3adee0bd4ad7e72383","modified":1634278414207},{"_id":"public/2021/10/13/GitPage再会/image-20211013104859549.png","hash":"71a4c379905b2b2699814d14a1b69b5f24c17e34","modified":1634278414207},{"_id":"public/2021/10/13/GitPage再会/image-20211013113715325.png","hash":"baad3c2d96a2ce263f009f6a9df9a5559f01a982","modified":1634278414207}],"Category":[{"name":"编程","_id":"ckurz67ca0007t0w86blv6flq"},{"name":"其他","_id":"ckurz67ce000et0w85nms7a60"},{"name":"杂","parent":"ckurz67ca0007t0w86blv6flq","_id":"ckurz67ce000ht0w86vu04wkk"},{"name":"爬虫","parent":"ckurz67ce000ht0w86vu04wkk","_id":"ckurz67cg000nt0w87lcjffrz"},{"name":"GitPage","parent":"ckurz67ce000ht0w86vu04wkk","_id":"ckurz67cg000ot0w81qtratdl"}],"Data":[],"Page":[{"layout":"about","title":"关于","date":"2016-04-20T20:48:33.000Z","comments":1,"_content":"","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"关于\"\ndate: 2016-04-21 04:48:33\ncomments: true\n---","updated":"2021-10-13T11:21:22.035Z","path":"about/index.html","_id":"ckurz67c00000t0w85f5664kz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2021-10-13T05:08:21.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-10-13 13:08:21\ntype: categories\nlayout: categories\n---\n","updated":"2021-10-13T10:39:00.424Z","path":"categories/index.html","comments":1,"_id":"ckurz67c50002t0w85n543yat","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"子类","date":"2021-10-13T08:21:50.000Z","layout":"category","_content":"","source":"category/index.md","raw":"---\ntitle: 子类\ndate: 2021-10-13 16:21:50\nlayout: \"category\"\n---\n","updated":"2021-10-13T10:38:57.700Z","path":"category/index.html","comments":1,"_id":"ckurz67c90005t0w8g19b9s9l","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"标签","date":"2021-10-12T12:51:18.000Z","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"标签\"\ndate: 2021-10-12 20:51:18\n---\n","updated":"2021-10-13T10:39:06.157Z","path":"tags/index.html","comments":1,"_id":"ckurz67cb0008t0w82i3y2jx8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"GitPage再会","date":"2021-10-13T12:16:00.000Z","lang":"zh","_content":"#### Hexo常用的几个命令：\n\nhexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹\nhexo server (hexo s) 启动本地web服务，用于博客的预览\nhexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）\n另外还有其他几个常用命令：\n\nhexo new \"postName\" #新建文章\n\nhexo new page \"pageName\" #新建页面\n\n常用简写\n\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n\n常用组合\n\nhexo d -g #生成部署\n\nhexo s -g #生成预览\n\n\n\n#### 分类和标签\n\n只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 `Foo, Bar` 不等于 `Bar, Foo`；而标签没有顺序和层次。\n\n```yaml\ncategories:\n- Diary\ntags:\n- PS3\n- Games\n```\n\n**分类方法的分歧**\n\n如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：\n\n```yaml\ncategories:\n  - Diary\n  - Life\n```\n\n会使分类`Life`成为`Diary`的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。\n\n如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。\n\n```yaml\ncategories:\n- [Diary, PlayStation]\n- [Diary, Games]\n- [Life]\n```\n\n此时这篇文章同时包括三个分类： `PlayStation` 和 `Games` 分别都是父分类 `Diary` 的子分类，同时 `Life` 是一个没有子分类的分类。\n\n\n\n#### 图片大小适应网页布局\n\n图片大小无法自适应div标签？如何控制渲染的缩放？hexo的标签似乎没有width这个参数设置的地方\n\n![image-20211013104840706](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013104840706.png)\n\n![image-20211013104859549](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013104859549.png)\n\np标签可以框柱图片大小，而div标签不行，直接修改img标签属性width=100%（height=auto）也可以。\n\np标签不能套在div标签外面，所以不能在模板里面改，只能控制markdown转换为html的逻辑，在img外面套p标签\n\nhttps://www.cnblogs.com/lovelvxia/p/5726316.html\n\n但如何控制markdown输出为html的时候将img包上p标签？（思路：如果无法控制转换过程，要么在css里面尝试修改img的属性，要么添加js改变html代码）\n\n换一种思路，利用theme自带的css，选中post-container下post-content内的所有img，设置width属性，大功告成（横向图片显示效果很好，但纵向图片显示过大）\n\n![image-20211013113431614](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013113431614.png)\n\n![image-20211013113715325](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013113715325.png)\n\n一开始想用expression表达式，但似乎这种用法已经被抛弃了，查阅css教程，直接用max-width就可以。\n\n![image-20211013125535030](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013125535030.png)\n\n纵向横向图片都能正常显示\n\n![image-20211013125604618](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013125604618.png)\n\n#### CSS 高度和宽度\n\nheight 和 width 属性不包括内边距、边框或外边距。它设置的是元素内边距、边框以及外边距内的区域的高度或宽度。\n\n##### CSS 高度和宽度值\n\nheight 和 width 属性可设置如下值：\n\n- auto - 默认。浏览器计算高度和宽度。\n- *length* - 以 px、cm 等定义高度/宽度。\n- % - 以包含块的百分比定义高度/宽度。\n- initial - 将高度/宽度设置为默认值。\n- inherit - 从其父值继承高度/宽度。\n\n##### 设置 CSS 尺寸属性\n\n| 属性                                                                   | 描述                 |\n| :--------------------------------------------------------------------- | :------------------- |\n| [height](https://www.w3school.com.cn/cssref/pr_dim_height.asp)         | 设置元素的高度。     |\n| [max-height](https://www.w3school.com.cn/cssref/pr_dim_max-height.asp) | 设置元素的最大高度。 |\n| [max-width](https://www.w3school.com.cn/cssref/pr_dim_max-width.asp)   | 设置元素的最大宽度。 |\n| [min-height](https://www.w3school.com.cn/cssref/pr_dim_min-height.asp) | 设置元素的最小高度。 |\n| [min-width](https://www.w3school.com.cn/cssref/pr_dim_min-width.asp)   | 设置元素的最小宽度。 |\n| [width](https://www.w3school.com.cn/cssref/pr_dim_width.asp)           | 设置元素的宽度。     |\n\n可以用长度值（例如 px、cm 等）或包含块的百分比（％）来指定 max-width（最大宽度），也可以将其设置为 none（默认值。意味着没有最大宽度）。\n\n\n\n#### 添加categories页面\n\n分类：https://blog.csdn.net/muzilanlan/article/details/81542917\n\n多级分类：https://www.jianshu.com/p/7d0c5e30e0f3\n\n官方文档说明：https://hexo.io/zh-cn/docs/variables\n\n讲的最透彻的文档：https://github.com/hughshen/blog/blob/c3390a5a99cfcf398a012a9cf742b7f41b49d345/app/posts/1437904915000-hexo-modify-theme.md\n\ncategories存放分类目录页，category存放某分类下的文章页。\n\nhexo new page categories后，在source文件夹下会新建一个categories目录和index.md，这个index.md只需要修改其Front-matter的属性，如下：![image-20211013165810378](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013165810378.png)\n\n最重要的是layout，这个参数值对应theme下layout目录中ejs模板。模板按照上文的链接设置即可。\n\n#### 安装图片链接转换插件\n\ncnpm install https://github.com/xcodebuild/hexo-asset-image --save\n\n报错Cannot find module 'hexo'：\n\n```\nnpm install hexo --save\n```\n\nTODO:\n\n图床、categories页的css样式","source":"_posts/GitPage再会.md","raw":"---\ntitle: GitPage再会\ndate: 2021-10-13 20:16:00\ntags:\n- GitPage\ncategories:\n- [编程, 杂, GitPage] \nlang: zh\n---\n#### Hexo常用的几个命令：\n\nhexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹\nhexo server (hexo s) 启动本地web服务，用于博客的预览\nhexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）\n另外还有其他几个常用命令：\n\nhexo new \"postName\" #新建文章\n\nhexo new page \"pageName\" #新建页面\n\n常用简写\n\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n\n常用组合\n\nhexo d -g #生成部署\n\nhexo s -g #生成预览\n\n\n\n#### 分类和标签\n\n只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 `Foo, Bar` 不等于 `Bar, Foo`；而标签没有顺序和层次。\n\n```yaml\ncategories:\n- Diary\ntags:\n- PS3\n- Games\n```\n\n**分类方法的分歧**\n\n如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：\n\n```yaml\ncategories:\n  - Diary\n  - Life\n```\n\n会使分类`Life`成为`Diary`的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。\n\n如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。\n\n```yaml\ncategories:\n- [Diary, PlayStation]\n- [Diary, Games]\n- [Life]\n```\n\n此时这篇文章同时包括三个分类： `PlayStation` 和 `Games` 分别都是父分类 `Diary` 的子分类，同时 `Life` 是一个没有子分类的分类。\n\n\n\n#### 图片大小适应网页布局\n\n图片大小无法自适应div标签？如何控制渲染的缩放？hexo的标签似乎没有width这个参数设置的地方\n\n![image-20211013104840706](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013104840706.png)\n\n![image-20211013104859549](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013104859549.png)\n\np标签可以框柱图片大小，而div标签不行，直接修改img标签属性width=100%（height=auto）也可以。\n\np标签不能套在div标签外面，所以不能在模板里面改，只能控制markdown转换为html的逻辑，在img外面套p标签\n\nhttps://www.cnblogs.com/lovelvxia/p/5726316.html\n\n但如何控制markdown输出为html的时候将img包上p标签？（思路：如果无法控制转换过程，要么在css里面尝试修改img的属性，要么添加js改变html代码）\n\n换一种思路，利用theme自带的css，选中post-container下post-content内的所有img，设置width属性，大功告成（横向图片显示效果很好，但纵向图片显示过大）\n\n![image-20211013113431614](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013113431614.png)\n\n![image-20211013113715325](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013113715325.png)\n\n一开始想用expression表达式，但似乎这种用法已经被抛弃了，查阅css教程，直接用max-width就可以。\n\n![image-20211013125535030](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013125535030.png)\n\n纵向横向图片都能正常显示\n\n![image-20211013125604618](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013125604618.png)\n\n#### CSS 高度和宽度\n\nheight 和 width 属性不包括内边距、边框或外边距。它设置的是元素内边距、边框以及外边距内的区域的高度或宽度。\n\n##### CSS 高度和宽度值\n\nheight 和 width 属性可设置如下值：\n\n- auto - 默认。浏览器计算高度和宽度。\n- *length* - 以 px、cm 等定义高度/宽度。\n- % - 以包含块的百分比定义高度/宽度。\n- initial - 将高度/宽度设置为默认值。\n- inherit - 从其父值继承高度/宽度。\n\n##### 设置 CSS 尺寸属性\n\n| 属性                                                                   | 描述                 |\n| :--------------------------------------------------------------------- | :------------------- |\n| [height](https://www.w3school.com.cn/cssref/pr_dim_height.asp)         | 设置元素的高度。     |\n| [max-height](https://www.w3school.com.cn/cssref/pr_dim_max-height.asp) | 设置元素的最大高度。 |\n| [max-width](https://www.w3school.com.cn/cssref/pr_dim_max-width.asp)   | 设置元素的最大宽度。 |\n| [min-height](https://www.w3school.com.cn/cssref/pr_dim_min-height.asp) | 设置元素的最小高度。 |\n| [min-width](https://www.w3school.com.cn/cssref/pr_dim_min-width.asp)   | 设置元素的最小宽度。 |\n| [width](https://www.w3school.com.cn/cssref/pr_dim_width.asp)           | 设置元素的宽度。     |\n\n可以用长度值（例如 px、cm 等）或包含块的百分比（％）来指定 max-width（最大宽度），也可以将其设置为 none（默认值。意味着没有最大宽度）。\n\n\n\n#### 添加categories页面\n\n分类：https://blog.csdn.net/muzilanlan/article/details/81542917\n\n多级分类：https://www.jianshu.com/p/7d0c5e30e0f3\n\n官方文档说明：https://hexo.io/zh-cn/docs/variables\n\n讲的最透彻的文档：https://github.com/hughshen/blog/blob/c3390a5a99cfcf398a012a9cf742b7f41b49d345/app/posts/1437904915000-hexo-modify-theme.md\n\ncategories存放分类目录页，category存放某分类下的文章页。\n\nhexo new page categories后，在source文件夹下会新建一个categories目录和index.md，这个index.md只需要修改其Front-matter的属性，如下：![image-20211013165810378](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013165810378.png)\n\n最重要的是layout，这个参数值对应theme下layout目录中ejs模板。模板按照上文的链接设置即可。\n\n#### 安装图片链接转换插件\n\ncnpm install https://github.com/xcodebuild/hexo-asset-image --save\n\n报错Cannot find module 'hexo'：\n\n```\nnpm install hexo --save\n```\n\nTODO:\n\n图床、categories页的css样式","slug":"GitPage再会","published":1,"updated":"2021-10-13T13:51:12.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckurz67c20001t0w8bt23hsoi","content":"<h4 id=\"Hexo常用的几个命令：\"><a href=\"#Hexo常用的几个命令：\" class=\"headerlink\" title=\"Hexo常用的几个命令：\"></a>Hexo常用的几个命令：</h4><p>hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹<br>hexo server (hexo s) 启动本地web服务，用于博客的预览<br>hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）<br>另外还有其他几个常用命令：</p>\n<p>hexo new “postName” #新建文章</p>\n<p>hexo new page “pageName” #新建页面</p>\n<p>常用简写</p>\n<p>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy</p>\n<p>常用组合</p>\n<p>hexo d -g #生成部署</p>\n<p>hexo s -g #生成预览</p>\n<h4 id=\"分类和标签\"><a href=\"#分类和标签\" class=\"headerlink\" title=\"分类和标签\"></a>分类和标签</h4><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">categories:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">Diary</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">PS3</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">Games</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>分类方法的分歧</strong></p>\n<p>如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">categories:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Diary</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Life</span></span><br></pre></td></tr></table></figure>\n\n<p>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p>\n<p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">categories:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"string\">Diary</span>, <span class=\"string\">PlayStation</span>]</span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"string\">Diary</span>, <span class=\"string\">Games</span>]</span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"string\">Life</span>]</span><br></pre></td></tr></table></figure>\n\n<p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p>\n<h4 id=\"图片大小适应网页布局\"><a href=\"#图片大小适应网页布局\" class=\"headerlink\" title=\"图片大小适应网页布局\"></a>图片大小适应网页布局</h4><p>图片大小无法自适应div标签？如何控制渲染的缩放？hexo的标签似乎没有width这个参数设置的地方</p>\n<p><img src=\"/2021/10/13/GitPage%E5%86%8D%E4%BC%9A/image-20211013104840706.png\" alt=\"image-20211013104840706\"></p>\n<p><img src=\"/2021/10/13/GitPage%E5%86%8D%E4%BC%9A/image-20211013104859549.png\" alt=\"image-20211013104859549\"></p>\n<p>p标签可以框柱图片大小，而div标签不行，直接修改img标签属性width=100%（height=auto）也可以。</p>\n<p>p标签不能套在div标签外面，所以不能在模板里面改，只能控制markdown转换为html的逻辑，在img外面套p标签</p>\n<p><a href=\"https://www.cnblogs.com/lovelvxia/p/5726316.html\">https://www.cnblogs.com/lovelvxia/p/5726316.html</a></p>\n<p>但如何控制markdown输出为html的时候将img包上p标签？（思路：如果无法控制转换过程，要么在css里面尝试修改img的属性，要么添加js改变html代码）</p>\n<p>换一种思路，利用theme自带的css，选中post-container下post-content内的所有img，设置width属性，大功告成（横向图片显示效果很好，但纵向图片显示过大）</p>\n<p><img src=\"/2021/10/13/GitPage%E5%86%8D%E4%BC%9A/image-20211013113431614.png\" alt=\"image-20211013113431614\"></p>\n<p><img src=\"/2021/10/13/GitPage%E5%86%8D%E4%BC%9A/image-20211013113715325.png\" alt=\"image-20211013113715325\"></p>\n<p>一开始想用expression表达式，但似乎这种用法已经被抛弃了，查阅css教程，直接用max-width就可以。</p>\n<p><img src=\"/2021/10/13/GitPage%E5%86%8D%E4%BC%9A/image-20211013125535030.png\" alt=\"image-20211013125535030\"></p>\n<p>纵向横向图片都能正常显示</p>\n<p><img src=\"/2021/10/13/GitPage%E5%86%8D%E4%BC%9A/image-20211013125604618.png\" alt=\"image-20211013125604618\"></p>\n<h4 id=\"CSS-高度和宽度\"><a href=\"#CSS-高度和宽度\" class=\"headerlink\" title=\"CSS 高度和宽度\"></a>CSS 高度和宽度</h4><p>height 和 width 属性不包括内边距、边框或外边距。它设置的是元素内边距、边框以及外边距内的区域的高度或宽度。</p>\n<h5 id=\"CSS-高度和宽度值\"><a href=\"#CSS-高度和宽度值\" class=\"headerlink\" title=\"CSS 高度和宽度值\"></a>CSS 高度和宽度值</h5><p>height 和 width 属性可设置如下值：</p>\n<ul>\n<li>auto - 默认。浏览器计算高度和宽度。</li>\n<li><em>length</em> - 以 px、cm 等定义高度/宽度。</li>\n<li>% - 以包含块的百分比定义高度/宽度。</li>\n<li>initial - 将高度/宽度设置为默认值。</li>\n<li>inherit - 从其父值继承高度/宽度。</li>\n</ul>\n<h5 id=\"设置-CSS-尺寸属性\"><a href=\"#设置-CSS-尺寸属性\" class=\"headerlink\" title=\"设置 CSS 尺寸属性\"></a>设置 CSS 尺寸属性</h5><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/cssref/pr_dim_height.asp\">height</a></td>\n<td align=\"left\">设置元素的高度。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/cssref/pr_dim_max-height.asp\">max-height</a></td>\n<td align=\"left\">设置元素的最大高度。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/cssref/pr_dim_max-width.asp\">max-width</a></td>\n<td align=\"left\">设置元素的最大宽度。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/cssref/pr_dim_min-height.asp\">min-height</a></td>\n<td align=\"left\">设置元素的最小高度。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/cssref/pr_dim_min-width.asp\">min-width</a></td>\n<td align=\"left\">设置元素的最小宽度。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/cssref/pr_dim_width.asp\">width</a></td>\n<td align=\"left\">设置元素的宽度。</td>\n</tr>\n</tbody></table>\n<p>可以用长度值（例如 px、cm 等）或包含块的百分比（％）来指定 max-width（最大宽度），也可以将其设置为 none（默认值。意味着没有最大宽度）。</p>\n<h4 id=\"添加categories页面\"><a href=\"#添加categories页面\" class=\"headerlink\" title=\"添加categories页面\"></a>添加categories页面</h4><p>分类：<a href=\"https://blog.csdn.net/muzilanlan/article/details/81542917\">https://blog.csdn.net/muzilanlan/article/details/81542917</a></p>\n<p>多级分类：<a href=\"https://www.jianshu.com/p/7d0c5e30e0f3\">https://www.jianshu.com/p/7d0c5e30e0f3</a></p>\n<p>官方文档说明：<a href=\"https://hexo.io/zh-cn/docs/variables\">https://hexo.io/zh-cn/docs/variables</a></p>\n<p>讲的最透彻的文档：<a href=\"https://github.com/hughshen/blog/blob/c3390a5a99cfcf398a012a9cf742b7f41b49d345/app/posts/1437904915000-hexo-modify-theme.md\">https://github.com/hughshen/blog/blob/c3390a5a99cfcf398a012a9cf742b7f41b49d345/app/posts/1437904915000-hexo-modify-theme.md</a></p>\n<p>categories存放分类目录页，category存放某分类下的文章页。</p>\n<p>hexo new page categories后，在source文件夹下会新建一个categories目录和index.md，这个index.md只需要修改其Front-matter的属性，如下：<img src=\"/2021/10/13/GitPage%E5%86%8D%E4%BC%9A/image-20211013165810378.png\" alt=\"image-20211013165810378\"></p>\n<p>最重要的是layout，这个参数值对应theme下layout目录中ejs模板。模板按照上文的链接设置即可。</p>\n<h4 id=\"安装图片链接转换插件\"><a href=\"#安装图片链接转换插件\" class=\"headerlink\" title=\"安装图片链接转换插件\"></a>安装图片链接转换插件</h4><p>cnpm install <a href=\"https://github.com/xcodebuild/hexo-asset-image\">https://github.com/xcodebuild/hexo-asset-image</a> –save</p>\n<p>报错Cannot find module ‘hexo’：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo --save</span><br></pre></td></tr></table></figure>\n\n<p>TODO:</p>\n<p>图床、categories页的css样式</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Hexo常用的几个命令：\"><a href=\"#Hexo常用的几个命令：\" class=\"headerlink\" title=\"Hexo常用的几个命令：\"></a>Hexo常用的几个命令：</h4><p>hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹<br>hexo server (hexo s) 启动本地web服务，用于博客的预览<br>hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）<br>另外还有其他几个常用命令：</p>\n<p>hexo new “postName” #新建文章</p>\n<p>hexo new page “pageName” #新建页面</p>\n<p>常用简写</p>\n<p>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy</p>\n<p>常用组合</p>\n<p>hexo d -g #生成部署</p>\n<p>hexo s -g #生成预览</p>\n<h4 id=\"分类和标签\"><a href=\"#分类和标签\" class=\"headerlink\" title=\"分类和标签\"></a>分类和标签</h4><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">categories:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">Diary</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">PS3</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">Games</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>分类方法的分歧</strong></p>\n<p>如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">categories:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Diary</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Life</span></span><br></pre></td></tr></table></figure>\n\n<p>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p>\n<p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">categories:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"string\">Diary</span>, <span class=\"string\">PlayStation</span>]</span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"string\">Diary</span>, <span class=\"string\">Games</span>]</span><br><span class=\"line\"><span class=\"bullet\">-</span> [<span class=\"string\">Life</span>]</span><br></pre></td></tr></table></figure>\n\n<p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p>\n<h4 id=\"图片大小适应网页布局\"><a href=\"#图片大小适应网页布局\" class=\"headerlink\" title=\"图片大小适应网页布局\"></a>图片大小适应网页布局</h4><p>图片大小无法自适应div标签？如何控制渲染的缩放？hexo的标签似乎没有width这个参数设置的地方</p>\n<p><img src=\"/2021/10/13/GitPage%E5%86%8D%E4%BC%9A/image-20211013104840706.png\" alt=\"image-20211013104840706\"></p>\n<p><img src=\"/2021/10/13/GitPage%E5%86%8D%E4%BC%9A/image-20211013104859549.png\" alt=\"image-20211013104859549\"></p>\n<p>p标签可以框柱图片大小，而div标签不行，直接修改img标签属性width=100%（height=auto）也可以。</p>\n<p>p标签不能套在div标签外面，所以不能在模板里面改，只能控制markdown转换为html的逻辑，在img外面套p标签</p>\n<p><a href=\"https://www.cnblogs.com/lovelvxia/p/5726316.html\">https://www.cnblogs.com/lovelvxia/p/5726316.html</a></p>\n<p>但如何控制markdown输出为html的时候将img包上p标签？（思路：如果无法控制转换过程，要么在css里面尝试修改img的属性，要么添加js改变html代码）</p>\n<p>换一种思路，利用theme自带的css，选中post-container下post-content内的所有img，设置width属性，大功告成（横向图片显示效果很好，但纵向图片显示过大）</p>\n<p><img src=\"/2021/10/13/GitPage%E5%86%8D%E4%BC%9A/image-20211013113431614.png\" alt=\"image-20211013113431614\"></p>\n<p><img src=\"/2021/10/13/GitPage%E5%86%8D%E4%BC%9A/image-20211013113715325.png\" alt=\"image-20211013113715325\"></p>\n<p>一开始想用expression表达式，但似乎这种用法已经被抛弃了，查阅css教程，直接用max-width就可以。</p>\n<p><img src=\"/2021/10/13/GitPage%E5%86%8D%E4%BC%9A/image-20211013125535030.png\" alt=\"image-20211013125535030\"></p>\n<p>纵向横向图片都能正常显示</p>\n<p><img src=\"/2021/10/13/GitPage%E5%86%8D%E4%BC%9A/image-20211013125604618.png\" alt=\"image-20211013125604618\"></p>\n<h4 id=\"CSS-高度和宽度\"><a href=\"#CSS-高度和宽度\" class=\"headerlink\" title=\"CSS 高度和宽度\"></a>CSS 高度和宽度</h4><p>height 和 width 属性不包括内边距、边框或外边距。它设置的是元素内边距、边框以及外边距内的区域的高度或宽度。</p>\n<h5 id=\"CSS-高度和宽度值\"><a href=\"#CSS-高度和宽度值\" class=\"headerlink\" title=\"CSS 高度和宽度值\"></a>CSS 高度和宽度值</h5><p>height 和 width 属性可设置如下值：</p>\n<ul>\n<li>auto - 默认。浏览器计算高度和宽度。</li>\n<li><em>length</em> - 以 px、cm 等定义高度/宽度。</li>\n<li>% - 以包含块的百分比定义高度/宽度。</li>\n<li>initial - 将高度/宽度设置为默认值。</li>\n<li>inherit - 从其父值继承高度/宽度。</li>\n</ul>\n<h5 id=\"设置-CSS-尺寸属性\"><a href=\"#设置-CSS-尺寸属性\" class=\"headerlink\" title=\"设置 CSS 尺寸属性\"></a>设置 CSS 尺寸属性</h5><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/cssref/pr_dim_height.asp\">height</a></td>\n<td align=\"left\">设置元素的高度。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/cssref/pr_dim_max-height.asp\">max-height</a></td>\n<td align=\"left\">设置元素的最大高度。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/cssref/pr_dim_max-width.asp\">max-width</a></td>\n<td align=\"left\">设置元素的最大宽度。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/cssref/pr_dim_min-height.asp\">min-height</a></td>\n<td align=\"left\">设置元素的最小高度。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/cssref/pr_dim_min-width.asp\">min-width</a></td>\n<td align=\"left\">设置元素的最小宽度。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/cssref/pr_dim_width.asp\">width</a></td>\n<td align=\"left\">设置元素的宽度。</td>\n</tr>\n</tbody></table>\n<p>可以用长度值（例如 px、cm 等）或包含块的百分比（％）来指定 max-width（最大宽度），也可以将其设置为 none（默认值。意味着没有最大宽度）。</p>\n<h4 id=\"添加categories页面\"><a href=\"#添加categories页面\" class=\"headerlink\" title=\"添加categories页面\"></a>添加categories页面</h4><p>分类：<a href=\"https://blog.csdn.net/muzilanlan/article/details/81542917\">https://blog.csdn.net/muzilanlan/article/details/81542917</a></p>\n<p>多级分类：<a href=\"https://www.jianshu.com/p/7d0c5e30e0f3\">https://www.jianshu.com/p/7d0c5e30e0f3</a></p>\n<p>官方文档说明：<a href=\"https://hexo.io/zh-cn/docs/variables\">https://hexo.io/zh-cn/docs/variables</a></p>\n<p>讲的最透彻的文档：<a href=\"https://github.com/hughshen/blog/blob/c3390a5a99cfcf398a012a9cf742b7f41b49d345/app/posts/1437904915000-hexo-modify-theme.md\">https://github.com/hughshen/blog/blob/c3390a5a99cfcf398a012a9cf742b7f41b49d345/app/posts/1437904915000-hexo-modify-theme.md</a></p>\n<p>categories存放分类目录页，category存放某分类下的文章页。</p>\n<p>hexo new page categories后，在source文件夹下会新建一个categories目录和index.md，这个index.md只需要修改其Front-matter的属性，如下：<img src=\"/2021/10/13/GitPage%E5%86%8D%E4%BC%9A/image-20211013165810378.png\" alt=\"image-20211013165810378\"></p>\n<p>最重要的是layout，这个参数值对应theme下layout目录中ejs模板。模板按照上文的链接设置即可。</p>\n<h4 id=\"安装图片链接转换插件\"><a href=\"#安装图片链接转换插件\" class=\"headerlink\" title=\"安装图片链接转换插件\"></a>安装图片链接转换插件</h4><p>cnpm install <a href=\"https://github.com/xcodebuild/hexo-asset-image\">https://github.com/xcodebuild/hexo-asset-image</a> –save</p>\n<p>报错Cannot find module ‘hexo’：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo --save</span><br></pre></td></tr></table></figure>\n\n<p>TODO:</p>\n<p>图床、categories页的css样式</p>\n"},{"title":"GitPage初见","date":"2021-10-12T15:29:32.000Z","lang":"zh","_content":"### 搭建GitPage\n\n---\n\n1. ##### 参考教程\n\n[Git Pages + Jekyll/Hexo搭建自己的博客](https://blog.csdn.net/muzilanlan/article/details/81542917)\n\n[hexo的环境搭建](https://www.cnblogs.com/zhvon/p/5351043.html)\n\n---\n\n2. ##### 配置步骤\n\n安装Node.js\n\nWindows下用安装包安装Node.js，注意选中Add to Path，在命令行用\n\n```sh\necho %PATH%\n```\n\n检查是否添加环境变量成功\n\n安装Hexo\n\n```sh\nnpm install -g hexo-cli\n```\n\n配置npm代理（失败）\n\n[npm安装报错 rollbackFailedOptional]: https://blog.csdn.net/weixin_42097653/article/details/82222432\n\n```sh\nnpm config set proxy http://127.0.0.1:7890\n\nnpm config set https-proxy http://127.0.0.1:7890\n```\n\n换源+取消代理\n\n```sh\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\nnpm config delete proxy\n\nnpm config delete https-proxy\n```\n\n用cnpm安装Hexo（成功）\n\n```sh\ncnpm install -g hexo-cli\n```\n\n\n{% asset_img image-20211011233002637.png  %}\n\n\n进入Sid-Jacob.github.io文件夹\n\n```sh\nhexo init\n```\n\n（失败）\n\n\n{% asset_img image-20211011235429217.png  %}\n\n可以看到clone成功，但insatll dependencies卡住，网络问题\n\n使用npm install安装依赖（失败）\n\n```sh\ncnpm install\n```\n\n（成功）\n\n[关于hexo init过程中出现fail to install dependencies的解决](https://www.cnblogs.com/moyidou/p/15254076.html){% asset_img image-20211011235808391.png  %}\n\n\n安装完后的目录结构\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   └── _posts\n└── themes\n```\n\n修改_config.yml进行配置\n\nhttps://hexo.io/zh-cn/docs/configuration\n\nhttp://ijiaober.github.io/2014/08/05/hexo/hexo-04/\n\n```\n# Category & Tagdefault_category: uncategorizedcategory_map:\t编程: programming\t生活: life\t其他: othertag_map:\n```\n\n添加插件、主题\n\nhttps://hexo.io/plugins/\n\nhttps://github.com/edolphin-ydf/hexo-encrypt\n\nhttps://github.com/HCLonely/hexo-bilibili-bangumi\n\nhttps://hexo.io/themes/\n\n添加主题\n\nhttp://ijiaober.github.io/2014/08/05/hexo/hexo-06/\n\nhttps://github.com/aircloud/hexo-theme-aircloud\n\n运行Hexo命令\n\n```sh\n$ hexo g #hexo generate 生成$ hexo s #启动本地web服务器\n```\n\n中途报错\n\n```\nValidationError: `slug` is required!\n```\n\n{% asset_img image-20211012005202636.png  %}\n\nGoogle了一圈发现...\n\nhttps://github.com/hexojs/hexo/issues/1099\n\n\n{% asset_img image-20211012005032236.png width=100% %}\n\n之前改成了untitled.md，改回默认的title.md就不报错了。\n\n启动Hexo\n\n\n{% asset_img image-20211012005353568.png  %}\n\n此时图片无法加载（将config里面语言改为zh，和theme里面一致，则home、tag、archive、about可根据theme配置显示为中文）\n\n\n{% asset_img image-20211012195022141.png  %}\n\n发现是图片的链接生成错误，手动修改链接后显示成功。\n\n\n{% asset_img image-20211012212716126.png  %}\n\n根据经验，hexo g命令根据theme的某个模板生成index等等页面的代码。查看目录结构，可以发现layout下面有页面的模板和partial页面模板，而该主题的用户头像在每个页面都会显示，故猜测其生成模板在partial目录下面。最终，在nav.ejs文件中找到对应位置。\n\n\n{% asset_img image-20211012212811606.png  %}\n\n\n{% asset_img image-20211012213030439.png  %}\n\n根据其用法，可以猜测我们需要在config文件中添加root参数和sidebar-avatar参数，如下：\n\n\n{% asset_img image-20211012213134836.png  %}\n\n重新hexo clean && hexo g && hexo s，图片显示成功！\n\n小bug：貌似hexo d上传不会检测同名文件，如将favicon.ico文件替换之后上传，favicon.ico并没有被替换，重命名后才检测到。(按道理应该是检测hash值有没有变化来决定是否更新文件)\n\n\n{% asset_img image-20211012213825868.png  %}\n\n部署到Gitpage上：在config里面设置，然后hexo d即可\n\n\n{% asset_img image-20211012214503181.png  %}\n\n\n（2021.10.12）","source":"_posts/GitPage初见.md","raw":"---\ntitle: GitPage初见\ndate: 2021-10-12 23:29:32\ntags:\n- GitPage\ncategories:\n- [编程, 杂, GitPage] \nlang: zh\n---\n### 搭建GitPage\n\n---\n\n1. ##### 参考教程\n\n[Git Pages + Jekyll/Hexo搭建自己的博客](https://blog.csdn.net/muzilanlan/article/details/81542917)\n\n[hexo的环境搭建](https://www.cnblogs.com/zhvon/p/5351043.html)\n\n---\n\n2. ##### 配置步骤\n\n安装Node.js\n\nWindows下用安装包安装Node.js，注意选中Add to Path，在命令行用\n\n```sh\necho %PATH%\n```\n\n检查是否添加环境变量成功\n\n安装Hexo\n\n```sh\nnpm install -g hexo-cli\n```\n\n配置npm代理（失败）\n\n[npm安装报错 rollbackFailedOptional]: https://blog.csdn.net/weixin_42097653/article/details/82222432\n\n```sh\nnpm config set proxy http://127.0.0.1:7890\n\nnpm config set https-proxy http://127.0.0.1:7890\n```\n\n换源+取消代理\n\n```sh\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\nnpm config delete proxy\n\nnpm config delete https-proxy\n```\n\n用cnpm安装Hexo（成功）\n\n```sh\ncnpm install -g hexo-cli\n```\n\n\n{% asset_img image-20211011233002637.png  %}\n\n\n进入Sid-Jacob.github.io文件夹\n\n```sh\nhexo init\n```\n\n（失败）\n\n\n{% asset_img image-20211011235429217.png  %}\n\n可以看到clone成功，但insatll dependencies卡住，网络问题\n\n使用npm install安装依赖（失败）\n\n```sh\ncnpm install\n```\n\n（成功）\n\n[关于hexo init过程中出现fail to install dependencies的解决](https://www.cnblogs.com/moyidou/p/15254076.html){% asset_img image-20211011235808391.png  %}\n\n\n安装完后的目录结构\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   └── _posts\n└── themes\n```\n\n修改_config.yml进行配置\n\nhttps://hexo.io/zh-cn/docs/configuration\n\nhttp://ijiaober.github.io/2014/08/05/hexo/hexo-04/\n\n```\n# Category & Tagdefault_category: uncategorizedcategory_map:\t编程: programming\t生活: life\t其他: othertag_map:\n```\n\n添加插件、主题\n\nhttps://hexo.io/plugins/\n\nhttps://github.com/edolphin-ydf/hexo-encrypt\n\nhttps://github.com/HCLonely/hexo-bilibili-bangumi\n\nhttps://hexo.io/themes/\n\n添加主题\n\nhttp://ijiaober.github.io/2014/08/05/hexo/hexo-06/\n\nhttps://github.com/aircloud/hexo-theme-aircloud\n\n运行Hexo命令\n\n```sh\n$ hexo g #hexo generate 生成$ hexo s #启动本地web服务器\n```\n\n中途报错\n\n```\nValidationError: `slug` is required!\n```\n\n{% asset_img image-20211012005202636.png  %}\n\nGoogle了一圈发现...\n\nhttps://github.com/hexojs/hexo/issues/1099\n\n\n{% asset_img image-20211012005032236.png width=100% %}\n\n之前改成了untitled.md，改回默认的title.md就不报错了。\n\n启动Hexo\n\n\n{% asset_img image-20211012005353568.png  %}\n\n此时图片无法加载（将config里面语言改为zh，和theme里面一致，则home、tag、archive、about可根据theme配置显示为中文）\n\n\n{% asset_img image-20211012195022141.png  %}\n\n发现是图片的链接生成错误，手动修改链接后显示成功。\n\n\n{% asset_img image-20211012212716126.png  %}\n\n根据经验，hexo g命令根据theme的某个模板生成index等等页面的代码。查看目录结构，可以发现layout下面有页面的模板和partial页面模板，而该主题的用户头像在每个页面都会显示，故猜测其生成模板在partial目录下面。最终，在nav.ejs文件中找到对应位置。\n\n\n{% asset_img image-20211012212811606.png  %}\n\n\n{% asset_img image-20211012213030439.png  %}\n\n根据其用法，可以猜测我们需要在config文件中添加root参数和sidebar-avatar参数，如下：\n\n\n{% asset_img image-20211012213134836.png  %}\n\n重新hexo clean && hexo g && hexo s，图片显示成功！\n\n小bug：貌似hexo d上传不会检测同名文件，如将favicon.ico文件替换之后上传，favicon.ico并没有被替换，重命名后才检测到。(按道理应该是检测hash值有没有变化来决定是否更新文件)\n\n\n{% asset_img image-20211012213825868.png  %}\n\n部署到Gitpage上：在config里面设置，然后hexo d即可\n\n\n{% asset_img image-20211012214503181.png  %}\n\n\n（2021.10.12）","slug":"GitPage初见","published":1,"updated":"2021-10-13T10:39:38.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckurz67c60003t0w85jrqa41r","content":"<h3 id=\"搭建GitPage\"><a href=\"#搭建GitPage\" class=\"headerlink\" title=\"搭建GitPage\"></a>搭建GitPage</h3><hr>\n<ol>\n<li><h5 id=\"参考教程\"><a href=\"#参考教程\" class=\"headerlink\" title=\"参考教程\"></a>参考教程</h5></li>\n</ol>\n<p><a href=\"https://blog.csdn.net/muzilanlan/article/details/81542917\">Git Pages + Jekyll/Hexo搭建自己的博客</a></p>\n<p><a href=\"https://www.cnblogs.com/zhvon/p/5351043.html\">hexo的环境搭建</a></p>\n<hr>\n<ol start=\"2\">\n<li><h5 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h5></li>\n</ol>\n<p>安装Node.js</p>\n<p>Windows下用安装包安装Node.js，注意选中Add to Path，在命令行用</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> %PATH%</span><br></pre></td></tr></table></figure>\n\n<p>检查是否添加环境变量成功</p>\n<p>安装Hexo</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>配置npm代理（失败）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://127.0.0.1:7890</span><br><span class=\"line\"></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> https-proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure>\n\n<p>换源+取消代理</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">npm config delete proxy</span><br><span class=\"line\"></span><br><span class=\"line\">npm config delete https-proxy</span><br></pre></td></tr></table></figure>\n\n<p>用cnpm安装Hexo（成功）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211011233002637.png\" class>\n\n\n<p>进入Sid-Jacob.github.io文件夹</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n\n<p>（失败）</p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211011235429217.png\" class>\n\n<p>可以看到clone成功，但insatll dependencies卡住，网络问题</p>\n<p>使用npm install安装依赖（失败）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install</span><br></pre></td></tr></table></figure>\n\n<p>（成功）</p>\n<p><a href=\"https://www.cnblogs.com/moyidou/p/15254076.html\">关于hexo init过程中出现fail to install dependencies的解决</a><img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211011235808391.png\" class></p>\n<p>安装完后的目录结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n\n<p>修改_config.yml进行配置</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/configuration\">https://hexo.io/zh-cn/docs/configuration</a></p>\n<p><a href=\"http://ijiaober.github.io/2014/08/05/hexo/hexo-04/\">http://ijiaober.github.io/2014/08/05/hexo/hexo-04/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Category &amp; Tagdefault_category: uncategorizedcategory_map:\t编程: programming\t生活: life\t其他: othertag_map:</span><br></pre></td></tr></table></figure>\n\n<p>添加插件、主题</p>\n<p><a href=\"https://hexo.io/plugins/\">https://hexo.io/plugins/</a></p>\n<p><a href=\"https://github.com/edolphin-ydf/hexo-encrypt\">https://github.com/edolphin-ydf/hexo-encrypt</a></p>\n<p><a href=\"https://github.com/HCLonely/hexo-bilibili-bangumi\">https://github.com/HCLonely/hexo-bilibili-bangumi</a></p>\n<p><a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a></p>\n<p>添加主题</p>\n<p><a href=\"http://ijiaober.github.io/2014/08/05/hexo/hexo-06/\">http://ijiaober.github.io/2014/08/05/hexo/hexo-06/</a></p>\n<p><a href=\"https://github.com/aircloud/hexo-theme-aircloud\">https://github.com/aircloud/hexo-theme-aircloud</a></p>\n<p>运行Hexo命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g <span class=\"comment\">#hexo generate 生成$ hexo s #启动本地web服务器</span></span><br></pre></td></tr></table></figure>\n\n<p>中途报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ValidationError: `slug` is required!</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012005202636.png\" class>\n\n<p>Google了一圈发现…</p>\n<p><a href=\"https://github.com/hexojs/hexo/issues/1099\">https://github.com/hexojs/hexo/issues/1099</a></p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012005032236.png\" class title=\"width&#x3D;100%\">\n\n<p>之前改成了untitled.md，改回默认的title.md就不报错了。</p>\n<p>启动Hexo</p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012005353568.png\" class>\n\n<p>此时图片无法加载（将config里面语言改为zh，和theme里面一致，则home、tag、archive、about可根据theme配置显示为中文）</p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012195022141.png\" class>\n\n<p>发现是图片的链接生成错误，手动修改链接后显示成功。</p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012212716126.png\" class>\n\n<p>根据经验，hexo g命令根据theme的某个模板生成index等等页面的代码。查看目录结构，可以发现layout下面有页面的模板和partial页面模板，而该主题的用户头像在每个页面都会显示，故猜测其生成模板在partial目录下面。最终，在nav.ejs文件中找到对应位置。</p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012212811606.png\" class>\n\n\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012213030439.png\" class>\n\n<p>根据其用法，可以猜测我们需要在config文件中添加root参数和sidebar-avatar参数，如下：</p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012213134836.png\" class>\n\n<p>重新hexo clean &amp;&amp; hexo g &amp;&amp; hexo s，图片显示成功！</p>\n<p>小bug：貌似hexo d上传不会检测同名文件，如将favicon.ico文件替换之后上传，favicon.ico并没有被替换，重命名后才检测到。(按道理应该是检测hash值有没有变化来决定是否更新文件)</p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012213825868.png\" class>\n\n<p>部署到Gitpage上：在config里面设置，然后hexo d即可</p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012214503181.png\" class>\n\n\n<p>（2021.10.12）</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"搭建GitPage\"><a href=\"#搭建GitPage\" class=\"headerlink\" title=\"搭建GitPage\"></a>搭建GitPage</h3><hr>\n<ol>\n<li><h5 id=\"参考教程\"><a href=\"#参考教程\" class=\"headerlink\" title=\"参考教程\"></a>参考教程</h5></li>\n</ol>\n<p><a href=\"https://blog.csdn.net/muzilanlan/article/details/81542917\">Git Pages + Jekyll/Hexo搭建自己的博客</a></p>\n<p><a href=\"https://www.cnblogs.com/zhvon/p/5351043.html\">hexo的环境搭建</a></p>\n<hr>\n<ol start=\"2\">\n<li><h5 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h5></li>\n</ol>\n<p>安装Node.js</p>\n<p>Windows下用安装包安装Node.js，注意选中Add to Path，在命令行用</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> %PATH%</span><br></pre></td></tr></table></figure>\n\n<p>检查是否添加环境变量成功</p>\n<p>安装Hexo</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>配置npm代理（失败）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://127.0.0.1:7890</span><br><span class=\"line\"></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> https-proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure>\n\n<p>换源+取消代理</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">npm config delete proxy</span><br><span class=\"line\"></span><br><span class=\"line\">npm config delete https-proxy</span><br></pre></td></tr></table></figure>\n\n<p>用cnpm安装Hexo（成功）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211011233002637.png\" class>\n\n\n<p>进入Sid-Jacob.github.io文件夹</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n\n<p>（失败）</p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211011235429217.png\" class>\n\n<p>可以看到clone成功，但insatll dependencies卡住，网络问题</p>\n<p>使用npm install安装依赖（失败）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install</span><br></pre></td></tr></table></figure>\n\n<p>（成功）</p>\n<p><a href=\"https://www.cnblogs.com/moyidou/p/15254076.html\">关于hexo init过程中出现fail to install dependencies的解决</a><img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211011235808391.png\" class></p>\n<p>安装完后的目录结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n\n<p>修改_config.yml进行配置</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/configuration\">https://hexo.io/zh-cn/docs/configuration</a></p>\n<p><a href=\"http://ijiaober.github.io/2014/08/05/hexo/hexo-04/\">http://ijiaober.github.io/2014/08/05/hexo/hexo-04/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Category &amp; Tagdefault_category: uncategorizedcategory_map:\t编程: programming\t生活: life\t其他: othertag_map:</span><br></pre></td></tr></table></figure>\n\n<p>添加插件、主题</p>\n<p><a href=\"https://hexo.io/plugins/\">https://hexo.io/plugins/</a></p>\n<p><a href=\"https://github.com/edolphin-ydf/hexo-encrypt\">https://github.com/edolphin-ydf/hexo-encrypt</a></p>\n<p><a href=\"https://github.com/HCLonely/hexo-bilibili-bangumi\">https://github.com/HCLonely/hexo-bilibili-bangumi</a></p>\n<p><a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a></p>\n<p>添加主题</p>\n<p><a href=\"http://ijiaober.github.io/2014/08/05/hexo/hexo-06/\">http://ijiaober.github.io/2014/08/05/hexo/hexo-06/</a></p>\n<p><a href=\"https://github.com/aircloud/hexo-theme-aircloud\">https://github.com/aircloud/hexo-theme-aircloud</a></p>\n<p>运行Hexo命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g <span class=\"comment\">#hexo generate 生成$ hexo s #启动本地web服务器</span></span><br></pre></td></tr></table></figure>\n\n<p>中途报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ValidationError: `slug` is required!</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012005202636.png\" class>\n\n<p>Google了一圈发现…</p>\n<p><a href=\"https://github.com/hexojs/hexo/issues/1099\">https://github.com/hexojs/hexo/issues/1099</a></p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012005032236.png\" class title=\"width&#x3D;100%\">\n\n<p>之前改成了untitled.md，改回默认的title.md就不报错了。</p>\n<p>启动Hexo</p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012005353568.png\" class>\n\n<p>此时图片无法加载（将config里面语言改为zh，和theme里面一致，则home、tag、archive、about可根据theme配置显示为中文）</p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012195022141.png\" class>\n\n<p>发现是图片的链接生成错误，手动修改链接后显示成功。</p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012212716126.png\" class>\n\n<p>根据经验，hexo g命令根据theme的某个模板生成index等等页面的代码。查看目录结构，可以发现layout下面有页面的模板和partial页面模板，而该主题的用户头像在每个页面都会显示，故猜测其生成模板在partial目录下面。最终，在nav.ejs文件中找到对应位置。</p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012212811606.png\" class>\n\n\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012213030439.png\" class>\n\n<p>根据其用法，可以猜测我们需要在config文件中添加root参数和sidebar-avatar参数，如下：</p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012213134836.png\" class>\n\n<p>重新hexo clean &amp;&amp; hexo g &amp;&amp; hexo s，图片显示成功！</p>\n<p>小bug：貌似hexo d上传不会检测同名文件，如将favicon.ico文件替换之后上传，favicon.ico并没有被替换，重命名后才检测到。(按道理应该是检测hash值有没有变化来决定是否更新文件)</p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012213825868.png\" class>\n\n<p>部署到Gitpage上：在config里面设置，然后hexo d即可</p>\n<img src=\"/2021/10/12/GitPage%E5%88%9D%E8%A7%81/10/12/GitPage%E5%88%9D%E8%A7%81/image-20211012214503181.png\" class>\n\n\n<p>（2021.10.12）</p>\n"},{"title":"Hello World","lang":"zh","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags:\n- 其他\ncategories:\n- [其他] \nlang: zh\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-10-12T12:36:05.811Z","updated":"2021-10-13T08:19:46.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckurz67c90006t0w8bjyj40bx","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"爬取B站指定up主所有视频封面","date":"2021-10-15T06:09:45.000Z","lang":"zh","_content":"```python\n'''\n爬取B站指定up主所有视频封面\n'''\nimport requests, math, time, random, re, os\n\nstart = time.time()\n\nmid =   # 修改1，B站UP主的mid，从网址复制\nsave_dir = './tem/'  # 修改2，图片保存路径\n\nURL = 'https://api.bilibili.com/x/space/arc/search?mid={}&ps=30&tid=0&pn={}&keyword=&order=pubdate&jsonp=jsonp'\n\nif not os.path.exists(save_dir):\n    os.makedirs(save_dir)\nps = int(re.findall('ps=(.*?)&', URL)[0])\nres = requests.get(url=URL.format(mid, 1)).json()\ntotal_video_counts = res['data']['page']['count']\ntotal_pn_counts = math.ceil(total_video_counts / ps)\ntime.sleep(0.05)\n\nvideo_list = []\nfor i in range(total_pn_counts):\n    res = requests.get(url=URL.format(mid, i + 1)).json()\n    for item in res['data']['list']['vlist']:\n        tem_dict = {}\n        tem_dict['title'] = item['title']\n        tem_dict['pic'] = item['pic']\n        tem_dict['bvid'] = item['bvid']\n        video_list.append(tem_dict)\n    time.sleep(random.uniform(0.05, 0.2))\n\ndownload_counts = 0\nskip_counts = 0\nfor item in video_list:\n    # print(item['pic'])\n    image = requests.get(item['pic']).content\n    if '《' in item['title']:\n        title = re.findall('《(.*?)》', item['title'])[0]\n    else:\n        title = item['title']\n    if '/' in title:\n        title = title.replace('/', ',')\n    if '互动' in item['title']:\n        skip_counts += 1\n        continue\n    with open(save_dir + '{}_防{}重.jpg'.format(title, random.randint(1, 1000)),\n              'wb') as f:\n        f.write(image)\n        download_counts += 1\n    time.sleep(random.uniform(0.05, 0.2))\n\nend = time.time()\nprint('{}张封面下载完成，任务计时{}秒，跳过{}个互动视频'.format(download_counts,\n                                           round(end - start, 2), skip_counts))\n```\n\n————————————————\n\n参考链接：https://blog.csdn.net/Rookie_Max/article/details/112313636\n\n\n","source":"_posts/爬取B站指定up主所有视频封面.md","raw":"---\ntitle: 爬取B站指定up主所有视频封面\ndate: 2021-10-15 14:09:45\ntags:\n- 爬虫\ncategories:\n- [编程, 杂, 爬虫] \nlang: zh\n---\n```python\n'''\n爬取B站指定up主所有视频封面\n'''\nimport requests, math, time, random, re, os\n\nstart = time.time()\n\nmid =   # 修改1，B站UP主的mid，从网址复制\nsave_dir = './tem/'  # 修改2，图片保存路径\n\nURL = 'https://api.bilibili.com/x/space/arc/search?mid={}&ps=30&tid=0&pn={}&keyword=&order=pubdate&jsonp=jsonp'\n\nif not os.path.exists(save_dir):\n    os.makedirs(save_dir)\nps = int(re.findall('ps=(.*?)&', URL)[0])\nres = requests.get(url=URL.format(mid, 1)).json()\ntotal_video_counts = res['data']['page']['count']\ntotal_pn_counts = math.ceil(total_video_counts / ps)\ntime.sleep(0.05)\n\nvideo_list = []\nfor i in range(total_pn_counts):\n    res = requests.get(url=URL.format(mid, i + 1)).json()\n    for item in res['data']['list']['vlist']:\n        tem_dict = {}\n        tem_dict['title'] = item['title']\n        tem_dict['pic'] = item['pic']\n        tem_dict['bvid'] = item['bvid']\n        video_list.append(tem_dict)\n    time.sleep(random.uniform(0.05, 0.2))\n\ndownload_counts = 0\nskip_counts = 0\nfor item in video_list:\n    # print(item['pic'])\n    image = requests.get(item['pic']).content\n    if '《' in item['title']:\n        title = re.findall('《(.*?)》', item['title'])[0]\n    else:\n        title = item['title']\n    if '/' in title:\n        title = title.replace('/', ',')\n    if '互动' in item['title']:\n        skip_counts += 1\n        continue\n    with open(save_dir + '{}_防{}重.jpg'.format(title, random.randint(1, 1000)),\n              'wb') as f:\n        f.write(image)\n        download_counts += 1\n    time.sleep(random.uniform(0.05, 0.2))\n\nend = time.time()\nprint('{}张封面下载完成，任务计时{}秒，跳过{}个互动视频'.format(download_counts,\n                                           round(end - start, 2), skip_counts))\n```\n\n————————————————\n\n参考链接：https://blog.csdn.net/Rookie_Max/article/details/112313636\n\n\n","slug":"爬取B站指定up主所有视频封面","published":1,"updated":"2021-10-15T06:13:19.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckurz67cb0009t0w82i7cbwdo","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">爬取B站指定up主所有视频封面</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests, math, time, random, re, os</span><br><span class=\"line\"></span><br><span class=\"line\">start = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">mid =   <span class=\"comment\"># 修改1，B站UP主的mid，从网址复制</span></span><br><span class=\"line\">save_dir = <span class=\"string\">&#x27;./tem/&#x27;</span>  <span class=\"comment\"># 修改2，图片保存路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">URL = <span class=\"string\">&#x27;https://api.bilibili.com/x/space/arc/search?mid=&#123;&#125;&amp;ps=30&amp;tid=0&amp;pn=&#123;&#125;&amp;keyword=&amp;order=pubdate&amp;jsonp=jsonp&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(save_dir):</span><br><span class=\"line\">    os.makedirs(save_dir)</span><br><span class=\"line\">ps = <span class=\"built_in\">int</span>(re.findall(<span class=\"string\">&#x27;ps=(.*?)&amp;&#x27;</span>, URL)[<span class=\"number\">0</span>])</span><br><span class=\"line\">res = requests.get(url=URL.<span class=\"built_in\">format</span>(mid, <span class=\"number\">1</span>)).json()</span><br><span class=\"line\">total_video_counts = res[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;page&#x27;</span>][<span class=\"string\">&#x27;count&#x27;</span>]</span><br><span class=\"line\">total_pn_counts = math.ceil(total_video_counts / ps)</span><br><span class=\"line\">time.sleep(<span class=\"number\">0.05</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">video_list = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(total_pn_counts):</span><br><span class=\"line\">    res = requests.get(url=URL.<span class=\"built_in\">format</span>(mid, i + <span class=\"number\">1</span>)).json()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> res[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;list&#x27;</span>][<span class=\"string\">&#x27;vlist&#x27;</span>]:</span><br><span class=\"line\">        tem_dict = &#123;&#125;</span><br><span class=\"line\">        tem_dict[<span class=\"string\">&#x27;title&#x27;</span>] = item[<span class=\"string\">&#x27;title&#x27;</span>]</span><br><span class=\"line\">        tem_dict[<span class=\"string\">&#x27;pic&#x27;</span>] = item[<span class=\"string\">&#x27;pic&#x27;</span>]</span><br><span class=\"line\">        tem_dict[<span class=\"string\">&#x27;bvid&#x27;</span>] = item[<span class=\"string\">&#x27;bvid&#x27;</span>]</span><br><span class=\"line\">        video_list.append(tem_dict)</span><br><span class=\"line\">    time.sleep(random.uniform(<span class=\"number\">0.05</span>, <span class=\"number\">0.2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">download_counts = <span class=\"number\">0</span></span><br><span class=\"line\">skip_counts = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> video_list:</span><br><span class=\"line\">    <span class=\"comment\"># print(item[&#x27;pic&#x27;])</span></span><br><span class=\"line\">    image = requests.get(item[<span class=\"string\">&#x27;pic&#x27;</span>]).content</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&#x27;《&#x27;</span> <span class=\"keyword\">in</span> item[<span class=\"string\">&#x27;title&#x27;</span>]:</span><br><span class=\"line\">        title = re.findall(<span class=\"string\">&#x27;《(.*?)》&#x27;</span>, item[<span class=\"string\">&#x27;title&#x27;</span>])[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        title = item[<span class=\"string\">&#x27;title&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&#x27;/&#x27;</span> <span class=\"keyword\">in</span> title:</span><br><span class=\"line\">        title = title.replace(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&#x27;互动&#x27;</span> <span class=\"keyword\">in</span> item[<span class=\"string\">&#x27;title&#x27;</span>]:</span><br><span class=\"line\">        skip_counts += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(save_dir + <span class=\"string\">&#x27;&#123;&#125;_防&#123;&#125;重.jpg&#x27;</span>.<span class=\"built_in\">format</span>(title, random.randint(<span class=\"number\">1</span>, <span class=\"number\">1000</span>)),</span><br><span class=\"line\">              <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(image)</span><br><span class=\"line\">        download_counts += <span class=\"number\">1</span></span><br><span class=\"line\">    time.sleep(random.uniform(<span class=\"number\">0.05</span>, <span class=\"number\">0.2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">end = time.time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;&#125;张封面下载完成，任务计时&#123;&#125;秒，跳过&#123;&#125;个互动视频&#x27;</span>.<span class=\"built_in\">format</span>(download_counts,</span><br><span class=\"line\">                                           <span class=\"built_in\">round</span>(end - start, <span class=\"number\">2</span>), skip_counts))</span><br></pre></td></tr></table></figure>\n\n<p>————————————————</p>\n<p>参考链接：<a href=\"https://blog.csdn.net/Rookie_Max/article/details/112313636\">https://blog.csdn.net/Rookie_Max/article/details/112313636</a></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">爬取B站指定up主所有视频封面</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests, math, time, random, re, os</span><br><span class=\"line\"></span><br><span class=\"line\">start = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">mid =   <span class=\"comment\"># 修改1，B站UP主的mid，从网址复制</span></span><br><span class=\"line\">save_dir = <span class=\"string\">&#x27;./tem/&#x27;</span>  <span class=\"comment\"># 修改2，图片保存路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">URL = <span class=\"string\">&#x27;https://api.bilibili.com/x/space/arc/search?mid=&#123;&#125;&amp;ps=30&amp;tid=0&amp;pn=&#123;&#125;&amp;keyword=&amp;order=pubdate&amp;jsonp=jsonp&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(save_dir):</span><br><span class=\"line\">    os.makedirs(save_dir)</span><br><span class=\"line\">ps = <span class=\"built_in\">int</span>(re.findall(<span class=\"string\">&#x27;ps=(.*?)&amp;&#x27;</span>, URL)[<span class=\"number\">0</span>])</span><br><span class=\"line\">res = requests.get(url=URL.<span class=\"built_in\">format</span>(mid, <span class=\"number\">1</span>)).json()</span><br><span class=\"line\">total_video_counts = res[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;page&#x27;</span>][<span class=\"string\">&#x27;count&#x27;</span>]</span><br><span class=\"line\">total_pn_counts = math.ceil(total_video_counts / ps)</span><br><span class=\"line\">time.sleep(<span class=\"number\">0.05</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">video_list = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(total_pn_counts):</span><br><span class=\"line\">    res = requests.get(url=URL.<span class=\"built_in\">format</span>(mid, i + <span class=\"number\">1</span>)).json()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> res[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"string\">&#x27;list&#x27;</span>][<span class=\"string\">&#x27;vlist&#x27;</span>]:</span><br><span class=\"line\">        tem_dict = &#123;&#125;</span><br><span class=\"line\">        tem_dict[<span class=\"string\">&#x27;title&#x27;</span>] = item[<span class=\"string\">&#x27;title&#x27;</span>]</span><br><span class=\"line\">        tem_dict[<span class=\"string\">&#x27;pic&#x27;</span>] = item[<span class=\"string\">&#x27;pic&#x27;</span>]</span><br><span class=\"line\">        tem_dict[<span class=\"string\">&#x27;bvid&#x27;</span>] = item[<span class=\"string\">&#x27;bvid&#x27;</span>]</span><br><span class=\"line\">        video_list.append(tem_dict)</span><br><span class=\"line\">    time.sleep(random.uniform(<span class=\"number\">0.05</span>, <span class=\"number\">0.2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">download_counts = <span class=\"number\">0</span></span><br><span class=\"line\">skip_counts = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> video_list:</span><br><span class=\"line\">    <span class=\"comment\"># print(item[&#x27;pic&#x27;])</span></span><br><span class=\"line\">    image = requests.get(item[<span class=\"string\">&#x27;pic&#x27;</span>]).content</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&#x27;《&#x27;</span> <span class=\"keyword\">in</span> item[<span class=\"string\">&#x27;title&#x27;</span>]:</span><br><span class=\"line\">        title = re.findall(<span class=\"string\">&#x27;《(.*?)》&#x27;</span>, item[<span class=\"string\">&#x27;title&#x27;</span>])[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        title = item[<span class=\"string\">&#x27;title&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&#x27;/&#x27;</span> <span class=\"keyword\">in</span> title:</span><br><span class=\"line\">        title = title.replace(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&#x27;互动&#x27;</span> <span class=\"keyword\">in</span> item[<span class=\"string\">&#x27;title&#x27;</span>]:</span><br><span class=\"line\">        skip_counts += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(save_dir + <span class=\"string\">&#x27;&#123;&#125;_防&#123;&#125;重.jpg&#x27;</span>.<span class=\"built_in\">format</span>(title, random.randint(<span class=\"number\">1</span>, <span class=\"number\">1000</span>)),</span><br><span class=\"line\">              <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(image)</span><br><span class=\"line\">        download_counts += <span class=\"number\">1</span></span><br><span class=\"line\">    time.sleep(random.uniform(<span class=\"number\">0.05</span>, <span class=\"number\">0.2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">end = time.time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;&#125;张封面下载完成，任务计时&#123;&#125;秒，跳过&#123;&#125;个互动视频&#x27;</span>.<span class=\"built_in\">format</span>(download_counts,</span><br><span class=\"line\">                                           <span class=\"built_in\">round</span>(end - start, <span class=\"number\">2</span>), skip_counts))</span><br></pre></td></tr></table></figure>\n\n<p>————————————————</p>\n<p>参考链接：<a href=\"https://blog.csdn.net/Rookie_Max/article/details/112313636\">https://blog.csdn.net/Rookie_Max/article/details/112313636</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/GitPage初见/image-20211011233002637.png","slug":"image-20211011233002637.png","post":"ckurz67c60003t0w85jrqa41r","modified":0,"renderable":0},{"_id":"source/_posts/GitPage初见/image-20211011235429217.png","slug":"image-20211011235429217.png","post":"ckurz67c60003t0w85jrqa41r","modified":0,"renderable":0},{"_id":"source/_posts/GitPage初见/image-20211011235808391.png","slug":"image-20211011235808391.png","post":"ckurz67c60003t0w85jrqa41r","modified":0,"renderable":0},{"_id":"source/_posts/GitPage初见/image-20211012000236087.png","slug":"image-20211012000236087.png","post":"ckurz67c60003t0w85jrqa41r","modified":0,"renderable":0},{"_id":"source/_posts/GitPage初见/image-20211012005032236.png","slug":"image-20211012005032236.png","post":"ckurz67c60003t0w85jrqa41r","modified":0,"renderable":0},{"_id":"source/_posts/GitPage初见/image-20211012005202636.png","slug":"image-20211012005202636.png","post":"ckurz67c60003t0w85jrqa41r","modified":0,"renderable":0},{"_id":"source/_posts/GitPage初见/image-20211012005353568.png","slug":"image-20211012005353568.png","post":"ckurz67c60003t0w85jrqa41r","modified":0,"renderable":0},{"_id":"source/_posts/GitPage初见/image-20211012195022141.png","slug":"image-20211012195022141.png","post":"ckurz67c60003t0w85jrqa41r","modified":0,"renderable":0},{"_id":"source/_posts/GitPage初见/image-20211012212716126.png","slug":"image-20211012212716126.png","post":"ckurz67c60003t0w85jrqa41r","modified":0,"renderable":0},{"_id":"source/_posts/GitPage初见/image-20211012212811606.png","slug":"image-20211012212811606.png","post":"ckurz67c60003t0w85jrqa41r","modified":0,"renderable":0},{"_id":"source/_posts/GitPage初见/image-20211012213030439.png","slug":"image-20211012213030439.png","post":"ckurz67c60003t0w85jrqa41r","modified":0,"renderable":0},{"_id":"source/_posts/GitPage初见/image-20211012213134836.png","slug":"image-20211012213134836.png","post":"ckurz67c60003t0w85jrqa41r","modified":0,"renderable":0},{"_id":"source/_posts/GitPage初见/image-20211012213825868.png","slug":"image-20211012213825868.png","post":"ckurz67c60003t0w85jrqa41r","modified":0,"renderable":0},{"_id":"source/_posts/GitPage初见/image-20211012214503181.png","slug":"image-20211012214503181.png","post":"ckurz67c60003t0w85jrqa41r","modified":0,"renderable":0},{"_id":"source/_posts/GitPage再会/image-20211013104840706-16340933276951.png","slug":"image-20211013104840706-16340933276951.png","post":"ckurz67c20001t0w8bt23hsoi","modified":0,"renderable":0},{"_id":"source/_posts/GitPage再会/image-20211013104840706.png","slug":"image-20211013104840706.png","post":"ckurz67c20001t0w8bt23hsoi","modified":0,"renderable":0},{"_id":"source/_posts/GitPage再会/image-20211013104859549.png","slug":"image-20211013104859549.png","post":"ckurz67c20001t0w8bt23hsoi","modified":0,"renderable":0},{"_id":"source/_posts/GitPage再会/image-20211013113431614.png","slug":"image-20211013113431614.png","post":"ckurz67c20001t0w8bt23hsoi","modified":0,"renderable":0},{"_id":"source/_posts/GitPage再会/image-20211013113715325.png","slug":"image-20211013113715325.png","post":"ckurz67c20001t0w8bt23hsoi","modified":0,"renderable":0},{"_id":"source/_posts/GitPage再会/image-20211013125535030.png","slug":"image-20211013125535030.png","post":"ckurz67c20001t0w8bt23hsoi","modified":0,"renderable":0},{"_id":"source/_posts/GitPage再会/image-20211013125604618.png","slug":"image-20211013125604618.png","post":"ckurz67c20001t0w8bt23hsoi","modified":0,"renderable":0},{"_id":"source/_posts/GitPage再会/image-20211013165810378.png","slug":"image-20211013165810378.png","post":"ckurz67c20001t0w8bt23hsoi","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckurz67c90006t0w8bjyj40bx","category_id":"ckurz67ce000et0w85nms7a60","_id":"ckurz67cf000kt0w8a48qen56"},{"post_id":"ckurz67cb0009t0w82i7cbwdo","category_id":"ckurz67ca0007t0w86blv6flq","_id":"ckurz67ch000qt0w8ahshaqci"},{"post_id":"ckurz67cb0009t0w82i7cbwdo","category_id":"ckurz67ce000ht0w86vu04wkk","_id":"ckurz67ch000rt0w842gdcyj9"},{"post_id":"ckurz67cb0009t0w82i7cbwdo","category_id":"ckurz67cg000nt0w87lcjffrz","_id":"ckurz67ch000st0w89oene4ta"},{"post_id":"ckurz67c20001t0w8bt23hsoi","category_id":"ckurz67ca0007t0w86blv6flq","_id":"ckurz67ch000tt0w81nd708qq"},{"post_id":"ckurz67c20001t0w8bt23hsoi","category_id":"ckurz67ce000ht0w86vu04wkk","_id":"ckurz67ch000ut0w81p9q7nz2"},{"post_id":"ckurz67c20001t0w8bt23hsoi","category_id":"ckurz67cg000ot0w81qtratdl","_id":"ckurz67ch000vt0w8a5iufr93"},{"post_id":"ckurz67c60003t0w85jrqa41r","category_id":"ckurz67ca0007t0w86blv6flq","_id":"ckurz67ch000wt0w8ajoj8v1u"},{"post_id":"ckurz67c60003t0w85jrqa41r","category_id":"ckurz67ce000ht0w86vu04wkk","_id":"ckurz67ch000xt0w816v59qd7"},{"post_id":"ckurz67c60003t0w85jrqa41r","category_id":"ckurz67cg000ot0w81qtratdl","_id":"ckurz67ch000yt0w81t9e6q0k"}],"PostTag":[{"post_id":"ckurz67c20001t0w8bt23hsoi","tag_id":"ckurz67c80004t0w839fq2g3o","_id":"ckurz67cd000ct0w80zpv0se6"},{"post_id":"ckurz67c60003t0w85jrqa41r","tag_id":"ckurz67c80004t0w839fq2g3o","_id":"ckurz67ce000ft0w87yxngklz"},{"post_id":"ckurz67c90006t0w8bjyj40bx","tag_id":"ckurz67ce000dt0w8aok9ab60","_id":"ckurz67cf000it0w89w8g9oxh"},{"post_id":"ckurz67cb0009t0w82i7cbwdo","tag_id":"ckurz67ce000gt0w8d5y7dl8m","_id":"ckurz67cf000lt0w88kex5bbl"}],"Tag":[{"name":"GitPage","_id":"ckurz67c80004t0w839fq2g3o"},{"name":"其他","_id":"ckurz67ce000dt0w8aok9ab60"},{"name":"爬虫","_id":"ckurz67ce000gt0w8d5y7dl8m"}]}}